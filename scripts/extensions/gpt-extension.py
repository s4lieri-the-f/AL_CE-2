import requests

"""
Пожалуйста, по возможности сделай через REST API ChatGPT, я уверен, оно есть. Использовать тут стороннюю библиотеку это кощунство.
Примеры можешь найти в client.py, я к ВК только через REST обращаюсь.

Ликбез: REST (Representational State Transfer) позволяет получать и модифицировать данные и состояния удаленных приложений, передавая HTTP-вызовы через интернет или любую другую сеть

Остальные классы (кроме DeepL) я вынес в отдельные файлы экстеншна
"""

class GPT:
    def __init__(self, api_token: str, api_ver: str, chats: list, log) -> None:

        """
        Инициализируй токен, версию, список чатов, которые принадлежат этому экземпляру.
        Можем просто создавать разные экземпляры на каждую конфу, реализуй в общем виде

        Не забудь проинициализировать список промптов, я их вынес в assets/extensions/prompts
        Настоятельно рекомендую все наши промпты вообще вынести каждый в отдельный .txt-файл, так нам будет просто их на лету сохранять и включать без ребута самого клиента.
        
        log - МЕТОД. Здесь передаётся МЕТОД для удобства, чтобы ты мог вызывать self.log() и логировать запросы хотя бы частично.
        Реализация лежит в конце client.Client() 
        """
        
        return
    
    def help(self) -> None:

        """
        Вывод помощи. Как описание класса. 
        """

        return

    
    def gen(self, request) -> str:

        """
        Генерируй по запросу. В документации к API GPT сам найдешь, при необходимости смёрджишь промпт и запрос.

        Вначале проверяй забит ли контекст, при необходимости вызывай clear().
        """

        return 
    
    def clear(self, n: int) -> None:

        """
        Зачищай из контекста столько сообщений, сколько просят. Вызывай только из других методов класса, команду под это делать не будем.

        n - количество сообщений, которые надо срезать из контекста. Думаю, базово половину.
        """

        return

    def reconfigure(**kwargs) -> None:
        """
        **kwargs - именованный аргумент. он хавает любое количество любых конструкций типа arg=value.
        Реализуй два типа именованных аргумента, ver и prompt
        Если есть хотя бы один из них - перебиваешь self.ver или self.prompt, которые инициализировал в __init__(), зачищаешь весь контекст.
        Если нет ни одного - в log() просто подаешь варн, говоришь, что пустой реконфиг и всё уже настроено. По желанию можешь зачистить контекст, использовать как фулребут.
        """

        return
    
    def add_prompt(self, name:str, prompt: str) -> None:
        """
        Докидываешь в self.prompts или как ты их там словарем хранить будешь.
        Потом выгружаешь добавленный в файл assets/extensions/prompts/{name}.txt. Сохраняешь.
        """

    """
    Остальные вспомогательные методы на твое усмотрение. Главное сделай понятно и чисто.
    """